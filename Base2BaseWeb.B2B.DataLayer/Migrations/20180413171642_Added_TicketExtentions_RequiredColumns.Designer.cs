// <auto-generated />
using Base2BaseWeb.B2B.DataLayer.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Base2BaseWeb.B2B.DataLayer.Migrations
{
    [DbContext(typeof(b2b_testContext))]
    [Migration("20180413171642_Added_TicketExtentions_RequiredColumns")]
    partial class Added_TicketExtentions_RequiredColumns
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.Account", b =>
                {
                    b.Property<int>("AccountNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("account_number");

                    b.Property<short?>("AccType")
                        .HasColumnName("acc_type");

                    b.Property<string>("AccountName")
                        .HasColumnName("account_name")
                        .HasMaxLength(255);

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasMaxLength(255);

                    b.Property<double?>("Rest")
                        .HasColumnName("rest");

                    b.Property<int?>("TopAccountNumber")
                        .HasColumnName("top_account_number");

                    b.HasKey("AccountNumber")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("account");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.AccountPlan", b =>
                {
                    b.Property<int>("AccountPlanNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("account_plan_number");

                    b.Property<string>("AccountCode")
                        .HasColumnName("account_code")
                        .HasMaxLength(255);

                    b.Property<string>("AccountName")
                        .HasColumnName("account_name")
                        .HasMaxLength(255);

                    b.Property<string>("AccountSphere")
                        .HasColumnName("account_sphere")
                        .HasMaxLength(255);

                    b.Property<short?>("AccountType")
                        .HasColumnName("account_type");

                    b.HasKey("AccountPlanNumber");

                    b.ToTable("account_plan");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.AccTransChema", b =>
                {
                    b.Property<int>("AccTransChemaNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("acc_trans_chema_number");

                    b.Property<int?>("Account1Number")
                        .HasColumnName("account1_number");

                    b.Property<int?>("Account2Number")
                        .HasColumnName("account2_number");

                    b.Property<int?>("ArticlNumber")
                        .HasColumnName("articl_number");

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasMaxLength(255);

                    b.Property<double?>("Percent")
                        .HasColumnName("percent");

                    b.HasKey("AccTransChemaNumber")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ArticlNumber")
                        .HasName("articl_trans_rel");

                    b.ToTable("acc_trans_chema");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.AccTransJrn", b =>
                {
                    b.Property<int>("AccTransJrnNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("acc_trans_jrn_number");

                    b.Property<int?>("AccTransChemaNumber")
                        .HasColumnName("acc_trans_chema_number");

                    b.Property<int?>("Account1Number")
                        .HasColumnName("account1_number");

                    b.Property<int?>("Account2Number")
                        .HasColumnName("account2_number");

                    b.Property<int?>("ArticlNumber")
                        .HasColumnName("articl_number");

                    b.Property<int?>("BundleNaklNumber")
                        .HasColumnName("bundle_nakl_number");

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("DateUtv")
                        .HasColumnName("date_utv")
                        .HasColumnType("datetime");

                    b.Property<double?>("Summa")
                        .HasColumnName("summa");

                    b.Property<int?>("UserNumber")
                        .HasColumnName("user_number");

                    b.Property<bool>("Utv")
                        .HasColumnName("utv");

                    b.HasKey("AccTransJrnNumber")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("acc_trans_jrn");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.Articl", b =>
                {
                    b.Property<int>("ArticlNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("articl_number");

                    b.Property<bool>("ActPass")
                        .HasColumnName("act_pass");

                    b.Property<string>("ArticlName")
                        .IsRequired()
                        .HasColumnName("articl_name")
                        .HasMaxLength(255);

                    b.Property<bool>("Closed")
                        .HasColumnName("closed");

                    b.HasKey("ArticlNumber")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("articl");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.AspNetRoles", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.AspNetUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasName("IX_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.AspNetUserLogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("UserId")
                        .HasMaxLength(128);

                    b.HasKey("LoginProvider", "ProviderKey", "UserId");

                    b.HasIndex("UserId")
                        .HasName("IX_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.AspNetUserRoles", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(128);

                    b.Property<string>("RoleId")
                        .HasMaxLength(128);

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId")
                        .HasName("IX_RoleId");

                    b.HasIndex("UserId")
                        .HasName("IX_UserId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.AspNetUsers", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTime?>("LockoutEndDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Name");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.BillOptionsInfo", b =>
                {
                    b.Property<int>("BillOptionsInfoId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DocumentTemplateId");

                    b.Property<double>("Limit");

                    b.Property<int?>("PointNumber");

                    b.HasKey("BillOptionsInfoId");

                    b.HasIndex("DocumentTemplateId")
                        .IsUnique()
                        .HasFilter("[DocumentTemplateId] IS NOT NULL");

                    b.HasIndex("PointNumber");

                    b.ToTable("BillSettingsOptionsInfo");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.BillSettingsInfo", b =>
                {
                    b.Property<int>("BillSettingsInfoId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AutomaticBilling");

                    b.Property<int?>("DocumentTemplateId");

                    b.Property<int?>("PointNumber");

                    b.Property<bool>("SendByEmail");

                    b.Property<int?>("ServicePlaceholderTypeId");

                    b.HasKey("BillSettingsInfoId");

                    b.HasIndex("DocumentTemplateId")
                        .IsUnique()
                        .HasFilter("[DocumentTemplateId] IS NOT NULL");

                    b.HasIndex("PointNumber")
                        .IsUnique()
                        .HasFilter("[PointNumber] IS NOT NULL");

                    b.HasIndex("ServicePlaceholderTypeId")
                        .IsUnique()
                        .HasFilter("[ServicePlaceholderTypeId] IS NOT NULL");

                    b.ToTable("BillSettingsInfo");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.Car", b =>
                {
                    b.Property<int>("CarNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("car_number");

                    b.Property<string>("Model")
                        .HasColumnName("model")
                        .HasMaxLength(255);

                    b.Property<double?>("Netto")
                        .HasColumnName("netto");

                    b.Property<string>("RegNumber")
                        .HasColumnName("reg_number")
                        .HasMaxLength(255);

                    b.Property<double?>("Tara")
                        .HasColumnName("tara");

                    b.HasKey("CarNumber")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("car");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.CashTable", b =>
                {
                    b.Property<int>("CashNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cash_number");

                    b.Property<string>("CashText")
                        .HasColumnName("cash_text")
                        .HasMaxLength(255);

                    b.Property<string>("FieldName")
                        .HasColumnName("field_name")
                        .HasMaxLength(255);

                    b.Property<string>("FormName")
                        .HasColumnName("form_name")
                        .HasMaxLength(255);

                    b.Property<int?>("LngNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("lng_number")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("CashNumber")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CashText")
                        .HasName("cash_text");

                    b.HasIndex("FieldName")
                        .HasName("field_name");

                    b.HasIndex("FormName")
                        .HasName("form_name");

                    b.HasIndex("LngNumber")
                        .HasName("lng_number");

                    b.ToTable("cash_table");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.ClientConnectionInfo", b =>
                {
                    b.Property<int>("ClientConnectionInfoId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DatabaseName")
                        .HasMaxLength(100);

                    b.Property<string>("Login")
                        .HasMaxLength(50);

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(100);

                    b.Property<int?>("PointNumber");

                    b.Property<string>("ServerName")
                        .HasMaxLength(100);

                    b.HasKey("ClientConnectionInfoId");

                    b.HasIndex("PointNumber")
                        .IsUnique()
                        .HasFilter("[PointNumber] IS NOT NULL");

                    b.HasIndex("ServerName", "DatabaseName", "Login", "PasswordHash")
                        .IsUnique()
                        .HasFilter("[ServerName] IS NOT NULL AND [DatabaseName] IS NOT NULL AND [Login] IS NOT NULL AND [PasswordHash] IS NOT NULL");

                    b.ToTable("ClientConnectionInfo");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.CliGroup", b =>
                {
                    b.Property<int>("CliGroupNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cli_group_number");

                    b.Property<string>("CliGroupName")
                        .HasColumnName("cli_group_name")
                        .HasMaxLength(250);

                    b.Property<bool>("Post")
                        .HasColumnName("post");

                    b.HasKey("CliGroupNumber")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("cli_group");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.ContactEmailInfo", b =>
                {
                    b.Property<int>("ContactEmailInfoId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<bool>("IncludeToMailList");

                    b.Property<int?>("PointNumber");

                    b.HasKey("ContactEmailInfoId");

                    b.HasIndex("Email");

                    b.HasIndex("PointNumber");

                    b.ToTable("ContactEmailInfo");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.ContactPhoneInfo", b =>
                {
                    b.Property<int>("ContactPhoneInfoId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContactFullName")
                        .HasMaxLength(200);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50);

                    b.Property<int?>("PointNumber");

                    b.HasKey("ContactPhoneInfoId");

                    b.HasIndex("PointNumber");

                    b.HasIndex("ContactFullName", "PhoneNumber");

                    b.ToTable("ContactPhonelInfo");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.DebtCalcMethodInfo", b =>
                {
                    b.Property<int>("DebtCalcMethodInfoId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DebtCalcMethodTypeId");

                    b.Property<int?>("PointNumber");

                    b.HasKey("DebtCalcMethodInfoId");

                    b.HasIndex("DebtCalcMethodTypeId");

                    b.HasIndex("PointNumber")
                        .IsUnique()
                        .HasFilter("[PointNumber] IS NOT NULL");

                    b.ToTable("DebtCalcMethodInfo");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.DebtCalcMethodType", b =>
                {
                    b.Property<int>("DebtCalcMethodTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("DebtCalcMethodTypeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("DebtCalcMethodType");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.DebtControlInfo", b =>
                {
                    b.Property<int>("DebtControlInfoId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("DebtLimit");

                    b.Property<int>("GracePeriod");

                    b.Property<int>("NotificationFrequency");

                    b.Property<bool>("NotifyByEmail");

                    b.Property<bool>("NotifyBySms");

                    b.Property<bool>("NotifyByViber");

                    b.Property<int?>("PointNumber");

                    b.HasKey("DebtControlInfoId");

                    b.HasIndex("PointNumber")
                        .IsUnique()
                        .HasFilter("[PointNumber] IS NOT NULL");

                    b.ToTable("DebtControlInfo");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.DelivePoint", b =>
                {
                    b.Property<int>("DelivePointNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("delive_point_number");

                    b.Property<string>("DeliveAddress")
                        .HasColumnName("delive_address")
                        .HasMaxLength(255);

                    b.Property<string>("DelivePointName")
                        .HasColumnName("delive_point_name")
                        .HasMaxLength(255);

                    b.Property<string>("District")
                        .HasColumnName("district")
                        .HasMaxLength(255);

                    b.Property<double?>("Latitude")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnName("longitude");

                    b.Property<int?>("PointNumber")
                        .HasColumnName("point_number");

                    b.HasKey("DelivePointNumber")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("PointNumber")
                        .HasName("delive_point_rel");

                    b.ToTable("delive_point");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.DiscountRules", b =>
                {
                    b.Property<int>("DiscountRulesNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("discount_rules_number");

                    b.Property<double?>("DiscountPercent")
                        .HasColumnName("discount_percent");

                    b.Property<double?>("FactSaleSum")
                        .HasColumnName("fact_sale_sum");

                    b.Property<double?>("FactSaleSumDol")
                        .HasColumnName("fact_sale_sum_dol");

                    b.Property<int?>("PointNumber")
                        .HasColumnName("point_number");

                    b.Property<int?>("SalesPeriod")
                        .HasColumnName("sales_period");

                    b.Property<double?>("SalesSum")
                        .HasColumnName("sales_sum");

                    b.HasKey("DiscountRulesNumber");

                    b.HasIndex("PointNumber");

                    b.ToTable("discount_rules");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.DocStan", b =>
                {
                    b.Property<int>("DocStanId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("NameStan")
                        .HasColumnType("nchar(50)");

                    b.HasKey("DocStanId");

                    b.ToTable("DocStan");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.DocumentTemplate", b =>
                {
                    b.Property<int>("DocumentTemplateId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DocumentTemplateCategoryId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("DocumentTemplateId");

                    b.HasIndex("DocumentTemplateCategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("DocumentTemplate");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.DocumentTemplateCategory", b =>
                {
                    b.Property<int>("DocumentTemplateCategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("DocumentTemplateCategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("DocumentTemplateCategory");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.ExtPoint", b =>
                {
                    b.Property<int>("ExtPointNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ext_point_number");

                    b.Property<string>("ExtPointName")
                        .IsRequired()
                        .HasColumnName("ext_point_name");

                    b.Property<int>("PointNumber")
                        .HasColumnName("point_number");

                    b.HasKey("ExtPointNumber");

                    b.HasIndex("PointNumber");

                    b.ToTable("ext_point");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.ExtShablon", b =>
                {
                    b.Property<int>("ExtShablonNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ext_shablon_number");

                    b.Property<int>("CenaPrice1DolPosition")
                        .HasColumnName("cena_price1_dol_position");

                    b.Property<int>("CenaPrice1Position")
                        .HasColumnName("cena_price1_position");

                    b.Property<int>("CenaPrice2DolPosition")
                        .HasColumnName("cena_price2_dol_position");

                    b.Property<int>("CenaPrice2Position")
                        .HasColumnName("cena_price2_position");

                    b.Property<int>("CenaPrice3DolPosition")
                        .HasColumnName("cena_price3_dol_position");

                    b.Property<int>("CenaPrice3Position")
                        .HasColumnName("cena_price3_position");

                    b.Property<int>("CenaPrice4DolPosition")
                        .HasColumnName("cena_price4_dol_position");

                    b.Property<int>("CenaPrice4Position")
                        .HasColumnName("cena_price4_position");

                    b.Property<int>("CenaPrice5DolPosition")
                        .HasColumnName("cena_price5_dol_position");

                    b.Property<int>("CenaPrice5Position")
                        .HasColumnName("cena_price5_position");

                    b.Property<int>("IsSplit")
                        .HasColumnName("is_split");

                    b.Property<int>("PointNumber")
                        .HasColumnName("point_number");

                    b.Property<string>("ShablonName")
                        .HasColumnName("shablon_name")
                        .HasMaxLength(50);

                    b.Property<int>("SplitStep")
                        .HasColumnName("split_step");

                    b.Property<int>("TovarDescripPosition")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("tovar_descrip_position")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("TovarNamePosition")
                        .HasColumnName("tovar_name_position");

                    b.Property<int>("TovarPresentPosition")
                        .HasColumnName("tovar_present_position");

                    b.HasKey("ExtShablonNumber");

                    b.HasIndex("PointNumber");

                    b.ToTable("ext_shablon");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.ExtTovar", b =>
                {
                    b.Property<int>("ExtTovarNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ext_tovar_number");

                    b.Property<int>("ExtKatNumber")
                        .HasColumnName("ext_kat_number");

                    b.Property<string>("ExtTovarName")
                        .IsRequired()
                        .HasColumnName("ext_tovar_name");

                    b.Property<int>("PointNumber")
                        .HasColumnName("point_number");

                    b.Property<bool>("PriceOrNakl")
                        .HasColumnName("price_or_nakl");

                    b.Property<int>("TovarNumber")
                        .HasColumnName("tovar_number");

                    b.HasKey("ExtTovarNumber");

                    b.HasIndex("PointNumber");

                    b.HasIndex("TovarNumber");

                    b.ToTable("ext_tovar");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.FranchisingInfo", b =>
                {
                    b.Property<int>("FranchisingInfoId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("FranchisingTypeId");

                    b.Property<int?>("PointNumber");

                    b.HasKey("FranchisingInfoId");

                    b.HasIndex("FranchisingTypeId");

                    b.HasIndex("PointNumber")
                        .IsUnique()
                        .HasFilter("[PointNumber] IS NOT NULL");

                    b.ToTable("FranchisingInfo");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.FranchisingType", b =>
                {
                    b.Property<int>("FranchisingTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("FranchisingTypeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("FranchisingType");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.InOutJrn", b =>
                {
                    b.Property<int>("InOutJrnNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("in_out_jrn_number");

                    b.Property<int?>("ArticlNumber")
                        .HasColumnName("articl_number");

                    b.Property<DateTime?>("DateUtv")
                        .HasColumnName("date_utv")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("IoDate")
                        .HasColumnName("io_date")
                        .HasColumnType("datetime");

                    b.Property<string>("KeyField")
                        .HasColumnName("key_field")
                        .HasMaxLength(255);

                    b.Property<int?>("KeyNumber")
                        .HasColumnName("key_number");

                    b.Property<int?>("PointNumber")
                        .HasColumnName("point_number");

                    b.Property<string>("TableName")
                        .HasColumnName("table_name")
                        .HasMaxLength(255);

                    b.HasKey("InOutJrnNumber")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("in_out_jrn");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.Izmer", b =>
                {
                    b.Property<int>("IzmerNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("izmer_number");

                    b.Property<bool?>("DefaultIzmer")
                        .HasColumnName("default_izmer");

                    b.Property<string>("IzmerName")
                        .HasColumnName("izmer_name")
                        .HasMaxLength(50);

                    b.HasKey("IzmerNumber")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("izmer");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.Jrn", b =>
                {
                    b.Property<int>("JrnNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("jrn_number");

                    b.Property<double?>("CenaDol")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cena_dol")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("CenaOpt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cena_opt")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("CenaOptDol")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cena_opt_dol")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("CenaRozn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cena_rozn")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("DateMove")
                        .HasColumnName("date_move")
                        .HasColumnType("datetime");

                    b.Property<bool>("FiscalDocument")
                        .HasColumnName("fiscal_document");

                    b.Property<double?>("Kol")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("kol")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("Kurs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("kurs")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("ListNumber")
                        .HasColumnName("list_number")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("ListPrihNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("list_prih_number")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("NaklNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("nakl_number")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("NaklPrihNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("nakl_prih_number")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("NaklType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("nakl_type")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("RashPrih")
                        .HasColumnName("rash_prih");

                    b.Property<int?>("Reestr2Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("reestr2_number")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("ReestrNumber")
                        .HasColumnName("reestr_number")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("SerialNumber")
                        .HasColumnName("serial_number")
                        .HasMaxLength(255);

                    b.HasKey("JrnNumber")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("DateMove")
                        .HasName("date_move");

                    b.HasIndex("ListNumber")
                        .HasName("jrnlist_number");

                    b.HasIndex("ListPrihNumber")
                        .HasName("list_prih_number");

                    b.HasIndex("NaklNumber")
                        .HasName("nakl_number");

                    b.HasIndex("NaklType")
                        .HasName("nakl_type");

                    b.HasIndex("RashPrih")
                        .HasName("rash_prih");

                    b.HasIndex("Reestr2Number")
                        .HasName("reestr2_number");

                    b.HasIndex("ReestrNumber")
                        .HasName("reestrjrn");

                    b.ToTable("jrn");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.JrnOpl", b =>
                {
                    b.Property<int>("JrnOplNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("jrn_opl_number");

                    b.Property<DateTime?>("DateOpl")
                        .HasColumnName("date_opl")
                        .HasColumnType("datetime");

                    b.Property<int?>("Nakl1Number")
                        .HasColumnName("nakl1_number");

                    b.Property<int?>("Nakl2Number")
                        .HasColumnName("nakl2_number");

                    b.Property<int?>("NaklType")
                        .HasColumnName("nakl_type");

                    b.Property<double?>("SumOpl")
                        .HasColumnName("sum_opl");

                    b.Property<double?>("SumOplDol")
                        .HasColumnName("sum_opl_dol");

                    b.HasKey("JrnOplNumber");

                    b.HasIndex("Nakl1Number");

                    b.HasIndex("Nakl2Number", "DateOpl");

                    b.ToTable("jrn_opl");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.JrnRezerv", b =>
                {
                    b.Property<int>("JrnRezervNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("jrn_rezerv_number");

                    b.Property<double?>("KolRezerv")
                        .HasColumnName("kol_rezerv");

                    b.Property<int?>("ListNumber")
                        .HasColumnName("list_number");

                    b.Property<int?>("ListRezervNumber")
                        .HasColumnName("list_rezerv_number");

                    b.HasKey("JrnRezervNumber");

                    b.HasIndex("ListNumber");

                    b.HasIndex("ListRezervNumber");

                    b.ToTable("jrn_rezerv");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.Kassa", b =>
                {
                    b.Property<int>("KassaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("kassa_id");

                    b.Property<string>("KassaName")
                        .HasColumnName("kassa_name")
                        .HasColumnType("nchar(50)");

                    b.Property<int?>("ShopId")
                        .HasColumnName("shop_id");

                    b.Property<string>("TeamViewer")
                        .HasColumnName("team_viewer")
                        .HasColumnType("nchar(10)");

                    b.HasKey("KassaId");

                    b.ToTable("kassa");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.KassaTovar", b =>
                {
                    b.Property<int>("KassaId")
                        .HasColumnName("kassa_id");

                    b.Property<int>("TovarId")
                        .HasColumnName("tovar_id");

                    b.HasKey("KassaId", "TovarId");

                    b.HasIndex("TovarId");

                    b.ToTable("kassa_tovar");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.Kat", b =>
                {
                    b.Property<int>("KatNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("kat_number");

                    b.Property<string>("ExtKatName")
                        .HasColumnName("ext_kat_name")
                        .HasMaxLength(4000);

                    b.Property<byte[]>("KatImage")
                        .HasColumnName("kat_image")
                        .HasColumnType("image");

                    b.Property<string>("KatName")
                        .HasColumnName("kat_name")
                        .HasMaxLength(50);

                    b.Property<string>("MacroGroupId")
                        .HasMaxLength(50);

                    b.Property<double?>("PointsGeneratePercent");

                    b.Property<int?>("TopKat")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("top_kat")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("KatNumber")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("KatName", "TopKat")
                        .IsUnique()
                        .HasName("kat_name")
                        .HasFilter("[kat_name] IS NOT NULL AND [top_kat] IS NOT NULL");

                    b.ToTable("kat");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.KatAgent", b =>
                {
                    b.Property<int>("KatAgentNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("kat_agent_number");

                    b.Property<int?>("KatNumber")
                        .HasColumnName("kat_number");

                    b.Property<int?>("PointNumber")
                        .HasColumnName("point_number");

                    b.HasKey("KatAgentNumber");

                    b.HasIndex("KatNumber");

                    b.ToTable("kat_agent");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.KeyList", b =>
                {
                    b.Property<int>("KeyListNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("key_list_number");

                    b.Property<string>("AnswerKey")
                        .HasColumnName("answer_key")
                        .HasMaxLength(255);

                    b.Property<string>("InitKey")
                        .HasColumnName("init_key")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("RegDate")
                        .HasColumnName("reg_date")
                        .HasColumnType("datetime");

                    b.HasKey("KeyListNumber");

                    b.ToTable("key_list");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.List", b =>
                {
                    b.Property<int>("ListNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("list_number");

                    b.Property<double?>("CenaDol")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cena_dol")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("CenaDolAfter")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cena_dol_after")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("CenaOpt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cena_opt")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("CenaOptAfter")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cena_opt_after")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("CenaOptDol")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cena_opt_dol")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("CenaOptDolAfter")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cena_opt_dol_after")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("CenaRozn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cena_rozn")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("CenaRoznAfter")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cena_rozn_after")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("CenaZak")
                        .HasColumnName("cena_zak");

                    b.Property<double?>("CenaZakDol")
                        .HasColumnName("cena_zak_dol");

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasMaxLength(255);

                    b.Property<string>("CustDeclNumber")
                        .HasColumnName("cust_decl_number")
                        .HasMaxLength(100);

                    b.Property<double?>("Kol")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("kol")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("KolAdd")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("kol_add")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("KolAfter")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("kol_after")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("KolCurrent")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("kol_current")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("KolInPak")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("kol_in_pak")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("KolPak")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("kol_pak")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("ListPrihNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("list_prih_number")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("ListZakazNumber")
                        .HasColumnName("list_zakaz_number");

                    b.Property<int?>("NaklNumber")
                        .HasColumnName("nakl_number")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("NewRest")
                        .HasColumnName("new_rest");

                    b.Property<double?>("PercSkid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("perc_skid")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("Product")
                        .HasColumnName("product");

                    b.Property<int?>("RecipeNumber")
                        .HasColumnName("recipe_number");

                    b.Property<int?>("Reestr2Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("reestr2_number")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("ReestrNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("reestr_number")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RezList1")
                        .HasColumnName("rez_list1")
                        .HasMaxLength(128);

                    b.Property<string>("RezList2")
                        .HasColumnName("rez_list2")
                        .HasMaxLength(128);

                    b.Property<string>("RezList3")
                        .HasColumnName("rez_list3")
                        .HasMaxLength(128);

                    b.Property<string>("RezList4")
                        .HasColumnName("rez_list4")
                        .HasMaxLength(128);

                    b.Property<string>("RezList5")
                        .HasColumnName("rez_list5")
                        .HasMaxLength(128);

                    b.Property<string>("RezList6")
                        .HasColumnName("rez_list6")
                        .HasMaxLength(128);

                    b.Property<string>("RezList7")
                        .HasColumnName("rez_list7")
                        .HasMaxLength(128);

                    b.Property<string>("RezList8")
                        .HasColumnName("rez_list8")
                        .HasMaxLength(128);

                    b.Property<string>("SerialNumber")
                        .HasColumnName("serial_number")
                        .HasMaxLength(255);

                    b.Property<double?>("SumSkid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sum_skid")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("SumSkidDol")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sum_skid_dol")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("Tara")
                        .HasColumnName("tara");

                    b.Property<int?>("TovarCodeNumber")
                        .HasColumnName("tovar_code_number");

                    b.Property<int?>("TovarNumber")
                        .HasColumnName("tovar_number")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("Volume")
                        .HasColumnName("volume");

                    b.Property<double?>("Weight")
                        .HasColumnName("weight");

                    b.Property<int?>("ZakazlistNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("zakazlist_number")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("ListNumber")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ListPrihNumber")
                        .HasName("list_prih_number");

                    b.HasIndex("NaklNumber")
                        .HasName("nakllist");

                    b.HasIndex("ReestrNumber")
                        .HasName("listreestr_number");

                    b.HasIndex("RezList1")
                        .HasName("rez_list1");

                    b.HasIndex("RezList2")
                        .HasName("rez_list2");

                    b.HasIndex("RezList3")
                        .HasName("rez_list3");

                    b.HasIndex("RezList4")
                        .HasName("rez_list4");

                    b.HasIndex("RezList5")
                        .HasName("rez_list5");

                    b.HasIndex("RezList6")
                        .HasName("rez_list6");

                    b.HasIndex("RezList7")
                        .HasName("rez_list7");

                    b.HasIndex("RezList8")
                        .HasName("rez_list8");

                    b.HasIndex("TovarNumber")
                        .HasName("tovarlist");

                    b.HasIndex("ZakazlistNumber")
                        .HasName("zakazlist_number");

                    b.HasIndex("KolCurrent", "ReestrNumber", "Reestr2Number")
                        .HasName("IX_list_kol_reestr");

                    b.ToTable("list");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.LocationList", b =>
                {
                    b.Property<int>("LocationListNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("location_list_number");

                    b.Property<double?>("Accuracy")
                        .HasColumnName("accuracy");

                    b.Property<int?>("AgentNumber")
                        .HasColumnName("agent_number");

                    b.Property<string>("CorrectionService")
                        .HasColumnName("correction_service")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("DeviceTime")
                        .HasColumnName("device_time")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime");

                    b.Property<double?>("Latitude")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnName("longitude");

                    b.Property<string>("NearAddress")
                        .HasColumnName("near_address")
                        .HasMaxLength(255);

                    b.Property<double?>("NearAddressLatitude")
                        .HasColumnName("near_address_latitude");

                    b.Property<double?>("NearAddressLongitude")
                        .HasColumnName("near_address_longitude");

                    b.Property<string>("Provider")
                        .HasColumnName("provider")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ServerTime")
                        .HasColumnName("server_time")
                        .HasColumnType("datetime");

                    b.HasKey("LocationListNumber");

                    b.ToTable("location_list");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.Manager", b =>
                {
                    b.Property<int>("ManagerNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("manager_number");

                    b.Property<string>("ManagerName")
                        .IsRequired()
                        .HasColumnName("manager_name")
                        .HasColumnType("nchar(50)");

                    b.Property<string>("ManagerTelephone")
                        .HasColumnName("manager_telephone")
                        .HasColumnType("nchar(20)");

                    b.Property<int?>("PointId")
                        .HasColumnName("point_id");

                    b.HasKey("ManagerNumber");

                    b.HasIndex("PointId");

                    b.ToTable("manager");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.MarketingActionRecords", b =>
                {
                    b.Property<int>("MarketingActionRecordId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("MarketingActionId");

                    b.Property<int?>("MarketingToolId");

                    b.Property<int?>("NaklNumber")
                        .HasColumnName("nakl_number");

                    b.Property<double?>("PresentedPoints");

                    b.HasKey("MarketingActionRecordId");

                    b.HasIndex("NaklNumber");

                    b.ToTable("MarketingActionRecords");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.MyConnString", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<string>("Catalog")
                        .IsRequired()
                        .HasColumnName("catalog")
                        .HasColumnType("nchar(50)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnName("login")
                        .HasColumnType("nchar(50)");

                    b.Property<string>("Pass")
                        .IsRequired()
                        .HasColumnName("pass")
                        .HasColumnType("nchar(50)");

                    b.HasKey("Id");

                    b.ToTable("MyConnString");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.Nakl", b =>
                {
                    b.Property<int>("NaklNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("nakl_number");

                    b.Property<int?>("AgentNumber")
                        .HasColumnName("agent_number");

                    b.Property<int?>("ArticlNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("articl_number")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("AutoPayment")
                        .HasColumnName("auto_payment");

                    b.Property<double?>("BonusPaid");

                    b.Property<int?>("BundleNaklNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("bundle_nakl_number")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("CenaRoznSelect")
                        .HasColumnName("cena_rozn_select");

                    b.Property<short?>("CheckPoint")
                        .HasColumnName("check_point");

                    b.Property<double?>("ClientDiscount")
                        .HasColumnName("client_discount");

                    b.Property<DateTime?>("DateFranchUpload")
                        .HasColumnName("date_franch_upload")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateNakl")
                        .HasColumnName("date_nakl")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateUtv")
                        .HasColumnName("date_utv")
                        .HasColumnType("datetime");

                    b.Property<int?>("DelivePointNumber")
                        .HasColumnName("delive_point_number");

                    b.Property<string>("DeliveryCondition")
                        .HasColumnName("delivery_condition")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DocNumber")
                        .HasColumnName("doc_number")
                        .HasMaxLength(50);

                    b.Property<int?>("DocStanId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<Guid?>("DocumentGuid");

                    b.Property<string>("DovNumber")
                        .HasColumnName("dov_number")
                        .HasMaxLength(32);

                    b.Property<bool>("FiscalDocument")
                        .HasColumnName("fiscal_document");

                    b.Property<string>("FiscalNumber")
                        .HasColumnName("fiscal_number")
                        .HasMaxLength(255);

                    b.Property<short?>("Flag")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("flag")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("Kurs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("kurs")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("MaterialReq")
                        .HasMaxLength(50);

                    b.Property<string>("ModeOfShipment")
                        .HasMaxLength(50);

                    b.Property<int?>("NaklPropTemplateNumber")
                        .HasColumnName("nakl_prop_template_number");

                    b.Property<double?>("NaklRash")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("nakl_rash")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("NaklRashDol")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("nakl_rash_dol")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("NaklRashMe")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("nakl_rash_me")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("NaklRashMeDol")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("nakl_rash_me_dol")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("NaklType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("nakl_type")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("OrderRezerved")
                        .HasColumnName("order_rezerved");

                    b.Property<string>("Osn")
                        .HasColumnName("osn")
                        .HasMaxLength(255);

                    b.Property<double?>("PercSkid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("perc_skid")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("Point1Number")
                        .HasColumnName("point1_number")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("Point2Number")
                        .HasColumnName("point2_number")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PostNumber")
                        .HasColumnName("post_number")
                        .HasMaxLength(50);

                    b.Property<string>("Prim")
                        .HasColumnName("prim")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("PrintDate")
                        .HasColumnName("print_date")
                        .HasColumnType("datetime");

                    b.Property<bool>("RDol")
                        .HasColumnName("r_dol");

                    b.Property<bool>("RashPrih")
                        .HasColumnName("rash_prih");

                    b.Property<int?>("RecipeNumber")
                        .HasColumnName("recipe_number");

                    b.Property<bool>("Return")
                        .HasColumnName("return");

                    b.Property<string>("Rfq")
                        .HasColumnName("RFQ")
                        .HasMaxLength(50);

                    b.Property<int?>("RouteListNumber")
                        .HasColumnName("route_list_number");

                    b.Property<int?>("RouteNumber")
                        .HasColumnName("route_number");

                    b.Property<string>("SoAndProject")
                        .HasMaxLength(50);

                    b.Property<int?>("SourceNumber")
                        .HasColumnName("source_number");

                    b.Property<double?>("SumDol")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sum_dol")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("SumOpl")
                        .HasColumnName("sum_opl");

                    b.Property<double?>("SumOplDol")
                        .HasColumnName("sum_opl_dol");

                    b.Property<double?>("SumOpt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sum_opt")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("SumOptDol")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sum_opt_dol")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("SumRozn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sum_rozn")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("SumTara")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sum_tara")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("SumTaraDol")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sum_tara_dol")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("SumVolume")
                        .HasColumnName("sum_volume");

                    b.Property<double?>("SumVzr")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sum_vzr")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("SumVzrDol")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sum_vzr_dol")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("SumWeight")
                        .HasColumnName("sum_weight");

                    b.Property<string>("SupplierRef")
                        .HasMaxLength(50);

                    b.Property<double?>("SysKurs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sys_kurs")
                        .HasDefaultValueSql("((0))");

                    b.Property<Guid?>("TopDocumentGuid");

                    b.Property<int?>("UserNumber")
                        .HasColumnName("user_number");

                    b.Property<bool>("Utv")
                        .HasColumnName("utv");

                    b.Property<string>("VidPlat")
                        .HasColumnName("vid_plat")
                        .HasMaxLength(80);

                    b.Property<bool>("ViewAddProp")
                        .HasColumnName("view_add_prop");

                    b.HasKey("NaklNumber")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ArticlNumber")
                        .HasName("articl_number");

                    b.HasIndex("BundleNaklNumber")
                        .HasName("bundle_nakl_number");

                    b.HasIndex("DateUtv")
                        .HasName("date_utv");

                    b.HasIndex("DocNumber")
                        .HasName("doc_number");

                    b.HasIndex("DocStanId");

                    b.HasIndex("DocumentGuid")
                        .HasName("IX_DocumentGuid");

                    b.HasIndex("NaklType")
                        .HasName("nakl_type");

                    b.HasIndex("Point1Number")
                        .HasName("pointnakl");

                    b.HasIndex("Point2Number")
                        .HasName("pointnakl1");

                    b.HasIndex("NaklNumber", "NaklType", "Utv")
                        .HasName("IX_nakl_nakl_type_utv_nakl_number");

                    b.HasIndex("NaklNumber", "DateUtv", "Point1Number", "CheckPoint")
                        .HasName("check_point_index");

                    b.HasIndex("RashPrih", "SumVzr", "Point2Number", "DateUtv", "Utv")
                        .HasName("IX_nakl_sum_vzr");

                    b.HasIndex("RashPrih", "SumVzrDol", "Point2Number", "DateUtv", "Utv")
                        .HasName("IX_nakl_sum_vzr_dol");

                    b.ToTable("nakl");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.NaklImportJrn", b =>
                {
                    b.Property<int>("NaklImportJrnNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("nakl_import_jrn_number");

                    b.Property<double>("CenaNakl")
                        .HasColumnName("cena_nakl");

                    b.Property<double>("CenaNaklDol")
                        .HasColumnName("cena_nakl_dol");

                    b.Property<string>("ExtPoint1Name")
                        .IsRequired()
                        .HasColumnName("ext_point1_name");

                    b.Property<int>("ExtPoint1Number")
                        .HasColumnName("ext_point1_number");

                    b.Property<string>("ExtPoint2Name")
                        .IsRequired()
                        .HasColumnName("ext_point2_name");

                    b.Property<int>("ExtPoint2Number")
                        .HasColumnName("ext_point2_number");

                    b.Property<string>("ExtTovarName")
                        .IsRequired()
                        .HasColumnName("ext_tovar_name");

                    b.Property<int>("ExtTovarNumber")
                        .HasColumnName("ext_tovar_number");

                    b.Property<double>("KursNakl")
                        .HasColumnName("kurs_nakl");

                    b.Property<int>("ListNumber")
                        .HasColumnName("list_number");

                    b.Property<int>("NaklNumber")
                        .HasColumnName("nakl_number");

                    b.Property<int>("Point1Number")
                        .HasColumnName("point1_number");

                    b.Property<int>("Point2Number")
                        .HasColumnName("point2_number");

                    b.Property<DateTime>("RecordUpdateDate")
                        .HasColumnName("record_update_date")
                        .HasColumnType("datetime");

                    b.Property<double>("TovarKolNakl")
                        .HasColumnName("tovar_kol_nakl");

                    b.Property<int>("TovarNumber")
                        .HasColumnName("tovar_number");

                    b.HasKey("NaklImportJrnNumber");

                    b.ToTable("nakl_import_jrn");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.NaklProp", b =>
                {
                    b.Property<int>("NaklPropNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("nakl_prop_number");

                    b.Property<int?>("NaklNumber")
                        .HasColumnName("nakl_number");

                    b.Property<string>("PropertyName")
                        .HasColumnName("property_name")
                        .HasMaxLength(255);

                    b.Property<string>("PropertyValue")
                        .HasColumnName("property_value")
                        .HasMaxLength(255);

                    b.HasKey("NaklPropNumber")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("NaklNumber")
                        .HasName("nakl_prop_rel");

                    b.ToTable("nakl_prop");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.NaklPropTemplate", b =>
                {
                    b.Property<int>("NaklPropTemplateNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("nakl_prop_template_number");

                    b.Property<bool>("DefaultTemplate")
                        .HasColumnName("default_template");

                    b.Property<int?>("NaklType")
                        .HasColumnName("nakl_type");

                    b.Property<string>("TemplateName")
                        .HasColumnName("template_name")
                        .HasMaxLength(255);

                    b.HasKey("NaklPropTemplateNumber")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("nakl_prop_template");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.OrderExt", b =>
                {
                    b.Property<int>("OrderExtNumber")
                        .HasColumnName("order_ext_number");

                    b.Property<int?>("CalcAlg")
                        .HasColumnName("calc_alg");

                    b.Property<DateTime?>("EndDatePurchase")
                        .HasColumnName("end_date_purchase")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndDateSales")
                        .HasColumnName("end_date_sales")
                        .HasColumnType("datetime");

                    b.Property<bool?>("GoodsTransferInclude")
                        .HasColumnName("goods_transfer_include");

                    b.Property<bool?>("OnlyThisSupplier")
                        .HasColumnName("only_this_supplier");

                    b.Property<int?>("RoundCombo")
                        .HasColumnName("round_combo");

                    b.Property<int?>("SaleAnalasys")
                        .HasColumnName("sale_analasys");

                    b.Property<double?>("SpareFactor")
                        .HasColumnName("spare_factor");

                    b.Property<DateTime?>("StartDatePurchase")
                        .HasColumnName("start_date_purchase")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StartDateSales")
                        .HasColumnName("start_date_sales")
                        .HasColumnType("datetime");

                    b.HasKey("OrderExtNumber");

                    b.ToTable("order_ext");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.OrdersRedirection", b =>
                {
                    b.Property<int>("OrdersRedirectionNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OrdersRedirection_number");

                    b.Property<int?>("PointNumber")
                        .HasColumnName("point_number");

                    b.Property<int?>("RestaurantNumber")
                        .HasColumnName("restaurant_number");

                    b.Property<int?>("TovarNumber")
                        .HasColumnName("tovar_number");

                    b.HasKey("OrdersRedirectionNumber");

                    b.HasIndex("PointNumber");

                    b.HasIndex("RestaurantNumber");

                    b.HasIndex("TovarNumber");

                    b.ToTable("OrdersRedirection");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.Point", b =>
                {
                    b.Property<int>("PointNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("point_number");

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasMaxLength(255);

                    b.Property<string>("AddressFiscal")
                        .HasColumnName("address_fiscal")
                        .HasMaxLength(255);

                    b.Property<bool?>("AgentCashAllow")
                        .HasColumnName("agent_cash_allow");

                    b.Property<double?>("AgentMaxDiscount")
                        .HasColumnName("agent_max_discount");

                    b.Property<bool?>("AgentOnlySelectedCategories")
                        .HasColumnName("agent_only_selected_categories");

                    b.Property<bool?>("AgentOrderAllow")
                        .HasColumnName("agent_order_allow");

                    b.Property<bool?>("AgentSiAllow")
                        .HasColumnName("agent_si_allow");

                    b.Property<bool?>("AgentUseRoutes")
                        .HasColumnName("agent_use_routes");

                    b.Property<double?>("Arenda")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("arenda")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("BankAccount")
                        .HasColumnName("bank_account")
                        .HasMaxLength(50);

                    b.Property<string>("BankClearingNumber")
                        .HasMaxLength(255);

                    b.Property<bool>("BankFromParam")
                        .HasColumnName("bank_from_param");

                    b.Property<string>("BankName")
                        .HasColumnName("bank_name")
                        .HasMaxLength(255);

                    b.Property<bool?>("CardActivated")
                        .HasColumnName("card_activated");

                    b.Property<string>("CardNumber")
                        .HasColumnName("card_number")
                        .HasMaxLength(20);

                    b.Property<int?>("CashPointNumber")
                        .HasColumnName("cash_point_number");

                    b.Property<int?>("CliGroupNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cli_group_number")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("ClientKurs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("client_kurs")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("Closed")
                        .HasColumnName("closed");

                    b.Property<int?>("CoArticlNumber")
                        .HasColumnName("co_articl_number");

                    b.Property<bool?>("CommAgent")
                        .HasColumnName("comm_agent");

                    b.Property<string>("ContactPerson")
                        .HasColumnName("contact_person")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ContractEndDate")
                        .HasColumnName("contract_end_date")
                        .HasColumnType("datetime");

                    b.Property<string>("ContractNumber")
                        .HasColumnName("contract_number")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("ContractStartDate")
                        .HasColumnName("contract_start_date")
                        .HasColumnType("datetime");

                    b.Property<string>("CorrAccount")
                        .HasColumnName("corr_account")
                        .HasMaxLength(32);

                    b.Property<double?>("DateCliZad")
                        .HasColumnName("date_cli_zad");

                    b.Property<int?>("DayZad");

                    b.Property<bool>("DayZadOn");

                    b.Property<double?>("DiscountCardPercent")
                        .HasColumnName("discount_card_percent");

                    b.Property<int?>("DiscountType")
                        .HasColumnName("discount_type");

                    b.Property<bool>("Driver")
                        .HasColumnName("driver");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(255);

                    b.Property<bool?>("ExportDocumentToFranchiseService");

                    b.Property<string>("Fax")
                        .HasColumnName("fax")
                        .HasMaxLength(255);

                    b.Property<string>("Iban")
                        .HasColumnName("iban")
                        .HasMaxLength(255);

                    b.Property<string>("IndNum")
                        .HasColumnName("ind_num")
                        .HasMaxLength(50);

                    b.Property<string>("Kpp")
                        .HasColumnName("kpp")
                        .HasMaxLength(10);

                    b.Property<double?>("Kredit")
                        .HasColumnName("kredit");

                    b.Property<double?>("KreditDol")
                        .HasColumnName("kredit_dol");

                    b.Property<bool>("KreditOn")
                        .HasColumnName("kredit_on");

                    b.Property<DateTime?>("LastEditDate")
                        .HasColumnName("last_edit_date")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LicenceEndDate")
                        .HasColumnName("licence_end_date")
                        .HasColumnType("datetime");

                    b.Property<string>("LicenceNumber")
                        .HasColumnName("licence_number")
                        .HasMaxLength(255);

                    b.Property<string>("MaOtvPerson")
                        .HasColumnName("ma_otv_person")
                        .HasMaxLength(255);

                    b.Property<string>("MaOtvPersonFiscal")
                        .HasColumnName("ma_otv_person_fiscal")
                        .HasMaxLength(255);

                    b.Property<string>("Mfo")
                        .HasColumnName("mfo")
                        .HasMaxLength(50);

                    b.Property<string>("Name1Person")
                        .HasColumnName("name_1_person")
                        .HasMaxLength(255);

                    b.Property<string>("Name1PersonFiscal")
                        .HasColumnName("name_1_person_fiscal")
                        .HasMaxLength(255);

                    b.Property<string>("Name1PersonFiscalTaxId")
                        .HasColumnName("name_1_person_fiscal_tax_id")
                        .HasMaxLength(50);

                    b.Property<string>("Name2Person")
                        .HasColumnName("name_2_person")
                        .HasMaxLength(255);

                    b.Property<string>("Name2PersonFiscal")
                        .HasColumnName("name_2_person_fiscal")
                        .HasMaxLength(255);

                    b.Property<string>("Name2PersonFiscalTaxId")
                        .HasColumnName("name_2_person_fiscal_tax_id")
                        .HasMaxLength(50);

                    b.Property<string>("NameCeoPerson")
                        .HasColumnName("name_ceo_person")
                        .HasMaxLength(255);

                    b.Property<string>("NameFirm")
                        .HasColumnName("name_firm")
                        .HasMaxLength(255);

                    b.Property<string>("NameFirmFiscal")
                        .HasColumnName("name_firm_fiscal")
                        .HasMaxLength(255);

                    b.Property<bool>("NameFirmFromParam")
                        .HasColumnName("name_firm_from_param");

                    b.Property<bool>("NameFirmFromParamFiscal")
                        .HasColumnName("name_firm_from_param_fiscal");

                    b.Property<string>("NamePoint")
                        .IsRequired()
                        .HasColumnName("name_point")
                        .HasMaxLength(255);

                    b.Property<double?>("Nds")
                        .HasColumnName("nds");

                    b.Property<bool?>("NdsPayer")
                        .HasColumnName("nds_payer");

                    b.Property<string>("Okpo")
                        .HasColumnName("okpo")
                        .HasMaxLength(50);

                    b.Property<string>("PathToMobileSynchro")
                        .HasColumnName("path_to_mobile_synchro")
                        .HasMaxLength(255);

                    b.Property<int?>("PisArticlNumber")
                        .HasColumnName("pis_articl_number");

                    b.Property<string>("PointComment")
                        .HasColumnName("point_comment")
                        .HasMaxLength(255);

                    b.Property<int?>("PointType")
                        .HasColumnName("point_type");

                    b.Property<bool>("Post")
                        .HasColumnName("post");

                    b.Property<string>("Postconto")
                        .HasMaxLength(255);

                    b.Property<int?>("PriceColumnNumber")
                        .HasColumnName("price_column_number");

                    b.Property<string>("Prof1Person")
                        .HasColumnName("prof_1_person")
                        .HasMaxLength(255);

                    b.Property<string>("Prof1PersonFiscal")
                        .HasColumnName("prof_1_person_fiscal")
                        .HasMaxLength(255);

                    b.Property<string>("Prof2Person")
                        .HasColumnName("prof_2_person")
                        .HasMaxLength(255);

                    b.Property<string>("Prof2PersonFiscal")
                        .HasColumnName("prof_2_person_fiscal")
                        .HasMaxLength(255);

                    b.Property<bool>("Realis")
                        .HasColumnName("realis");

                    b.Property<bool?>("RoutesByDates")
                        .HasColumnName("routes_by_dates");

                    b.Property<double?>("Saldo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("saldo")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("SaldoDol")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("saldo_dol")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("SiArticlNumber")
                        .HasColumnName("si_articl_number");

                    b.Property<string>("SvidNum")
                        .HasColumnName("svid_num")
                        .HasMaxLength(50);

                    b.Property<string>("Swiftcode")
                        .HasMaxLength(255);

                    b.Property<string>("Telefon")
                        .HasColumnName("telefon")
                        .HasMaxLength(255);

                    b.Property<string>("TelefonFiscal")
                        .HasColumnName("telefon_fiscal")
                        .HasMaxLength(255);

                    b.Property<double?>("TransportPr")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("transport_pr")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("Waiter")
                        .HasColumnName("waiter");

                    b.Property<bool>("ZadActivate")
                        .HasColumnName("zad_activate");

                    b.HasKey("PointNumber")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CliGroupNumber")
                        .HasName("cli_group_number");

                    b.HasIndex("NamePoint")
                        .HasName("name_point1");

                    b.ToTable("point");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.PointAgent", b =>
                {
                    b.Property<int>("PointAgentNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("point_agent_number");

                    b.Property<int?>("AgentNumber")
                        .HasColumnName("agent_number");

                    b.Property<int?>("PointNumber")
                        .HasColumnName("point_number");

                    b.HasKey("PointAgentNumber");

                    b.HasIndex("AgentNumber");

                    b.ToTable("point_agent");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.PriceImportJrn", b =>
                {
                    b.Property<int>("PriceImportJrnNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("price_import_jrn_number");

                    b.Property<double>("CenaPrice1")
                        .HasColumnName("cena_price1");

                    b.Property<double>("CenaPrice1Dol")
                        .HasColumnName("cena_price1_dol");

                    b.Property<double>("CenaPrice2")
                        .HasColumnName("cena_price2");

                    b.Property<double>("CenaPrice2Dol")
                        .HasColumnName("cena_price2_dol");

                    b.Property<double>("CenaPrice3")
                        .HasColumnName("cena_price3");

                    b.Property<double>("CenaPrice3Dol")
                        .HasColumnName("cena_price3_dol");

                    b.Property<double>("CenaPrice4")
                        .HasColumnName("cena_price4");

                    b.Property<double>("CenaPrice4Dol")
                        .HasColumnName("cena_price4_dol");

                    b.Property<double>("CenaPrice5")
                        .HasColumnName("cena_price5");

                    b.Property<double>("CenaPrice5Dol")
                        .HasColumnName("cena_price5_dol");

                    b.Property<string>("ExtTovarName")
                        .IsRequired()
                        .HasColumnName("ext_tovar_name");

                    b.Property<int>("ExtTovarNumber")
                        .HasColumnName("ext_tovar_number");

                    b.Property<int>("IzmerNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("izmer_number")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("KatNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("kat_number")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("PointNumber")
                        .HasColumnName("point_number");

                    b.Property<bool>("TovarAppend")
                        .HasColumnName("tovar_append");

                    b.Property<string>("TovarDescrip")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("tovar_descrip")
                        .HasDefaultValueSql("('')");

                    b.Property<int>("TovarNumber")
                        .HasColumnName("tovar_number");

                    b.Property<string>("TovarPresent")
                        .IsRequired()
                        .HasColumnName("tovar_present")
                        .HasMaxLength(30);

                    b.Property<DateTime>("TovarUpdateDate")
                        .HasColumnName("tovar_update_date")
                        .HasColumnType("datetime");

                    b.HasKey("PriceImportJrnNumber");

                    b.ToTable("price_import_jrn");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.PriceShields", b =>
                {
                    b.Property<int>("PriceShieldsId")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("CenaDol")
                        .HasColumnName("cena_dol");

                    b.Property<double?>("CenaRozn")
                        .HasColumnName("cena_rozn");

                    b.Property<int?>("NaklNumber")
                        .HasColumnName("nakl_number");

                    b.Property<int?>("TovarNumber")
                        .HasColumnName("tovar_number");

                    b.HasKey("PriceShieldsId");

                    b.HasIndex("NaklNumber");

                    b.HasIndex("TovarNumber");

                    b.ToTable("PriceShields");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.PrintJobInfo", b =>
                {
                    b.Property<int>("PrintJobInfoId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DocumentTemplateId");

                    b.Property<int>("DocumentToPrintCopies");

                    b.Property<int?>("PointNumber");

                    b.HasKey("PrintJobInfoId");

                    b.HasIndex("DocumentTemplateId")
                        .IsUnique()
                        .HasFilter("[DocumentTemplateId] IS NOT NULL");

                    b.HasIndex("PointNumber");

                    b.ToTable("PrintJobInfo");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.Recipe", b =>
                {
                    b.Property<int>("RecipeNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("recipe_number");

                    b.Property<bool>("Active")
                        .HasColumnName("active");

                    b.Property<bool>("Closed")
                        .HasColumnName("closed");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("datetime");

                    b.Property<double?>("ExitProd")
                        .HasColumnName("exit_prod");

                    b.Property<double?>("SelfCost")
                        .HasColumnName("self_cost");

                    b.Property<double?>("SelfCostDol")
                        .HasColumnName("self_cost_dol");

                    b.Property<double?>("Size")
                        .HasColumnName("size");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("datetime");

                    b.Property<int?>("TovarNumber")
                        .HasColumnName("tovar_number");

                    b.HasKey("RecipeNumber")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("TovarNumber")
                        .HasName("recipe_rel");

                    b.ToTable("recipe");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.RecipeList", b =>
                {
                    b.Property<int>("RecipeListNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("recipe_list_number");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(255);

                    b.Property<double?>("Kol")
                        .HasColumnName("kol");

                    b.Property<int?>("RecipeNumber")
                        .HasColumnName("recipe_number");

                    b.Property<double?>("SelfCostPercent")
                        .HasColumnName("self_cost_percent");

                    b.Property<int?>("TovarNumber")
                        .HasColumnName("tovar_number");

                    b.HasKey("RecipeListNumber")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("RecipeNumber")
                        .HasName("recipe_list_rel");

                    b.HasIndex("TovarNumber")
                        .HasName("recipe_list_tovar_rel");

                    b.ToTable("recipe_list");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.Reestr", b =>
                {
                    b.Property<int>("ReestrNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("reestr_number");

                    b.Property<double?>("CenaDol")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cena_dol")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("CenaRozn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cena_rozn")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasMaxLength(255);

                    b.Property<double?>("Kol")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("kol")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("KolMin")
                        .HasColumnName("kol_min");

                    b.Property<double?>("KolRezerv")
                        .HasColumnName("kol_rezerv");

                    b.Property<DateTime?>("LastEditDate")
                        .HasColumnName("last_edit_date")
                        .HasColumnType("datetime");

                    b.Property<int?>("PointNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("point_number")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("PostNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("post_number")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Rezerv1")
                        .HasColumnName("rezerv1")
                        .HasMaxLength(128);

                    b.Property<string>("Rezerv2")
                        .HasColumnName("rezerv2")
                        .HasMaxLength(128);

                    b.Property<string>("Rezerv3")
                        .HasColumnName("rezerv3")
                        .HasMaxLength(128);

                    b.Property<string>("Rezerv4")
                        .HasColumnName("rezerv4")
                        .HasMaxLength(128);

                    b.Property<string>("Rezerv5")
                        .HasColumnName("rezerv5")
                        .HasMaxLength(128);

                    b.Property<string>("Rezerv6")
                        .HasColumnName("rezerv6")
                        .HasMaxLength(128);

                    b.Property<string>("Rezerv7")
                        .HasColumnName("rezerv7")
                        .HasMaxLength(128);

                    b.Property<string>("Rezerv8")
                        .HasColumnName("rezerv8")
                        .HasMaxLength(128);

                    b.Property<int?>("TovarNumber")
                        .HasColumnName("tovar_number")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("ReestrNumber")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CenaDol")
                        .HasName("cena_dol");

                    b.HasIndex("CenaRozn")
                        .HasName("cena_rozn");

                    b.HasIndex("Kol")
                        .HasName("kol");

                    b.HasIndex("PointNumber")
                        .HasName("pointreestr");

                    b.HasIndex("PostNumber")
                        .HasName("post_number");

                    b.HasIndex("Rezerv1")
                        .HasName("rezerv1");

                    b.HasIndex("Rezerv2")
                        .HasName("rezerv2");

                    b.HasIndex("Rezerv3")
                        .HasName("rezerv3");

                    b.HasIndex("Rezerv4")
                        .HasName("rezerv4");

                    b.HasIndex("Rezerv5")
                        .HasName("rezerv5");

                    b.HasIndex("Rezerv6")
                        .HasName("rezerv6");

                    b.HasIndex("Rezerv7")
                        .HasName("rezerv7");

                    b.HasIndex("Rezerv8")
                        .HasName("rezerv8");

                    b.HasIndex("TovarNumber")
                        .HasName("tovarreestr");

                    b.ToTable("reestr");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.Route", b =>
                {
                    b.Property<int>("RouteNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("route_number");

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasMaxLength(255);

                    b.Property<double?>("Distance")
                        .HasColumnName("distance");

                    b.HasKey("RouteNumber")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("route");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.RouteAgent", b =>
                {
                    b.Property<int>("RouteAgentNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("route_agent_number");

                    b.Property<DateTime?>("DateOfRoute")
                        .HasColumnName("date_of_route")
                        .HasColumnType("datetime");

                    b.Property<int?>("DayOfRoute")
                        .HasColumnName("day_of_route");

                    b.Property<int?>("PointNumber")
                        .HasColumnName("point_number");

                    b.Property<int?>("RouteNumber")
                        .HasColumnName("route_number");

                    b.HasKey("RouteAgentNumber");

                    b.HasIndex("RouteNumber");

                    b.ToTable("route_agent");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.RouteList", b =>
                {
                    b.Property<int>("RouteListNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("route_list_number");

                    b.Property<int?>("CarNumber")
                        .HasColumnName("car_number");

                    b.Property<DateTime?>("DateUtv")
                        .HasColumnName("date_utv")
                        .HasColumnType("datetime");

                    b.Property<double?>("Distance")
                        .HasColumnName("distance");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("datetime");

                    b.Property<int?>("ExpeditorNumber")
                        .HasColumnName("expeditor_number");

                    b.Property<string>("Osn")
                        .HasColumnName("osn")
                        .HasMaxLength(255);

                    b.Property<int?>("RouteNumber")
                        .HasColumnName("route_number");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("datetime");

                    b.Property<double?>("SumDol")
                        .HasColumnName("sum_dol");

                    b.Property<double?>("SumRozn")
                        .HasColumnName("sum_rozn");

                    b.Property<bool>("Utv")
                        .HasColumnName("utv");

                    b.Property<double?>("Volume")
                        .HasColumnName("volume");

                    b.Property<double?>("Weight")
                        .HasColumnName("weight");

                    b.HasKey("RouteListNumber")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CarNumber")
                        .HasName("car_rel");

                    b.HasIndex("ExpeditorNumber")
                        .HasName("expeditor_rel");

                    b.HasIndex("RouteNumber")
                        .HasName("route_list_rel");

                    b.ToTable("route_list");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.RouteNaklList", b =>
                {
                    b.Property<int>("RouteNaklListNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("route_nakl_list_number");

                    b.Property<int?>("NaklNumber")
                        .HasColumnName("nakl_number");

                    b.Property<int?>("RouteListNumber")
                        .HasColumnName("route_list_number");

                    b.HasKey("RouteNaklListNumber")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("NaklNumber")
                        .HasName("route_nakl_rel");

                    b.HasIndex("RouteListNumber")
                        .HasName("route_nakl_list_rel");

                    b.ToTable("route_nakl_list");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.RoutePoint", b =>
                {
                    b.Property<int>("RoutePointNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("route_point_number");

                    b.Property<int?>("DelivePointNumber")
                        .HasColumnName("delive_point_number");

                    b.Property<double?>("ReturnDistance")
                        .HasColumnName("return_distance");

                    b.Property<int?>("RouteNumber")
                        .HasColumnName("route_number");

                    b.Property<int?>("SortNumber")
                        .HasColumnName("sort_number");

                    b.Property<double?>("UpPointDistance")
                        .HasColumnName("up_point_distance");

                    b.HasKey("RoutePointNumber")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("DelivePointNumber")
                        .HasName("route_point_rel");

                    b.HasIndex("RouteNumber")
                        .HasName("route_rel");

                    b.ToTable("route_point");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("service_id");

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("nchar(50)");

                    b.Property<int>("KassaId")
                        .HasColumnName("kassa_id");

                    b.Property<int?>("PointId")
                        .HasColumnName("point_id");

                    b.Property<DateTime?>("ServiceDate")
                        .HasColumnName("service_date")
                        .HasColumnType("date");

                    b.HasKey("ServiceId");

                    b.HasIndex("KassaId");

                    b.HasIndex("PointId");

                    b.ToTable("service");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.ServicePlaceholderType", b =>
                {
                    b.Property<int>("ServicePlaceholderTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ServicePlaceholderTypeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ServicePlaceholderType");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.Shop", b =>
                {
                    b.Property<int>("ShopNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("shop_number");

                    b.Property<string>("Adress")
                        .HasColumnName("adress")
                        .HasColumnType("nchar(50)");

                    b.Property<int>("ManagerId")
                        .HasColumnName("manager_id");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("nchar(50)");

                    b.Property<int>("PointId")
                        .HasColumnName("point_id");

                    b.HasKey("ShopNumber");

                    b.HasIndex("ManagerId");

                    b.HasIndex("PointId");

                    b.ToTable("shop");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.SysJrn", b =>
                {
                    b.Property<int>("SysJrnNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sys_jrn_number");

                    b.Property<bool>("APerD")
                        .HasColumnName("a_per_d");

                    b.Property<bool>("APerE")
                        .HasColumnName("a_per_e");

                    b.Property<bool>("APerV")
                        .HasColumnName("a_per_v");

                    b.Property<bool>("ASpisD")
                        .HasColumnName("a_spis_d");

                    b.Property<bool>("ASpisE")
                        .HasColumnName("a_spis_e");

                    b.Property<bool>("ASpisV")
                        .HasColumnName("a_spis_v");

                    b.Property<bool>("Admin")
                        .HasColumnName("admin");

                    b.Property<int?>("AktNumber")
                        .HasColumnName("akt_number");

                    b.Property<bool>("CliZad")
                        .HasColumnName("cli_zad");

                    b.Property<int?>("ClientNumber")
                        .HasColumnName("client_number");

                    b.Property<string>("CompNumber")
                        .HasColumnName("comp_number")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("DateDoc")
                        .HasColumnName("date_doc")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateOperBase")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("date_oper_base")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(CONVERT([datetime],CONVERT([varchar],getdate(),(1)),(1))+CONVERT([datetime],CONVERT([varchar],getdate(),(14)),(14)))");

                    b.Property<DateTime?>("DateOperClient")
                        .HasColumnName("date_oper_client")
                        .HasColumnType("datetime");

                    b.Property<int?>("JrnNumber")
                        .HasColumnName("jrn_number");

                    b.Property<bool>("KD")
                        .HasColumnName("k_d");

                    b.Property<bool>("KE")
                        .HasColumnName("k_e");

                    b.Property<bool>("KV")
                        .HasColumnName("k_v");

                    b.Property<int?>("MsgNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("msg_number")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("NaklNumber")
                        .HasColumnName("nakl_number");

                    b.Property<string>("NameOper")
                        .HasColumnName("name_oper")
                        .HasMaxLength(255);

                    b.Property<bool>("PND")
                        .HasColumnName("p_n_d");

                    b.Property<bool>("PNE")
                        .HasColumnName("p_n_e");

                    b.Property<bool>("PNV")
                        .HasColumnName("p_n_v");

                    b.Property<bool>("PerND")
                        .HasColumnName("per_n_d");

                    b.Property<bool>("PerNE")
                        .HasColumnName("per_n_e");

                    b.Property<bool>("PerNV")
                        .HasColumnName("per_n_v");

                    b.Property<int?>("PointNumber")
                        .HasColumnName("point_number");

                    b.Property<bool>("RND")
                        .HasColumnName("r_n_d");

                    b.Property<bool>("RNE")
                        .HasColumnName("r_n_e");

                    b.Property<bool>("RNV")
                        .HasColumnName("r_n_v");

                    b.Property<int?>("ReestrNumber")
                        .HasColumnName("reestr_number");

                    b.Property<bool>("Sprav")
                        .HasColumnName("sprav");

                    b.Property<int?>("TovarNumber")
                        .HasColumnName("tovar_number");

                    b.Property<string>("UserName")
                        .HasColumnName("user_name")
                        .HasMaxLength(255);

                    b.Property<int?>("UserNumber")
                        .HasColumnName("user_number");

                    b.Property<string>("UserPasswd")
                        .HasColumnName("user_passwd")
                        .HasMaxLength(255);

                    b.Property<bool>("ZCliD")
                        .HasColumnName("z_cli_d");

                    b.Property<bool>("ZCliE")
                        .HasColumnName("z_cli_e");

                    b.Property<bool>("ZCliV")
                        .HasColumnName("z_cli_v");

                    b.Property<bool>("ZFirmD")
                        .HasColumnName("z_firm_d");

                    b.Property<bool>("ZFirmE")
                        .HasColumnName("z_firm_e");

                    b.Property<bool>("ZFirmV")
                        .HasColumnName("z_firm_v");

                    b.Property<int?>("ZadNumber")
                        .HasColumnName("zad_number");

                    b.HasKey("SysJrnNumber")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("MsgNumber")
                        .HasName("msg_number");

                    b.ToTable("sys_jrn");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.SysJrnExt", b =>
                {
                    b.Property<int>("SysJrnNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sys_jrn_number")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("MsgNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("msg_number")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("MsgText")
                        .HasColumnName("msg_text")
                        .HasColumnType("ntext");

                    b.HasKey("SysJrnNumber")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("sys_jrn_ext");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.TcuPar", b =>
                {
                    b.Property<string>("ParamName")
                        .HasColumnName("param_name")
                        .HasMaxLength(50);

                    b.Property<bool>("BoolValue")
                        .HasColumnName("bool_value");

                    b.Property<double?>("DoubleValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("double_value")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("LongValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("long_value")
                        .HasDefaultValueSql("((0))");

                    b.Property<short?>("ParamType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("param_type")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("TextValue")
                        .HasColumnName("text_value")
                        .HasMaxLength(255);

                    b.HasKey("ParamName")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("tcu_par");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateFinished");

                    b.Property<int?>("PointNumber");

                    b.Property<int?>("TicketStatusId");

                    b.Property<int?>("TicketSubjectId");

                    b.HasKey("TicketId");

                    b.HasIndex("PointNumber");

                    b.HasIndex("TicketStatusId");

                    b.HasIndex("TicketSubjectId");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.TicketStatus", b =>
                {
                    b.Property<int>("TicketStatusId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("TicketStatusName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("TicketStatusId");

                    b.HasIndex("TicketStatusName")
                        .IsUnique();

                    b.ToTable("TicketStatus");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.TicketSubject", b =>
                {
                    b.Property<int>("TicketSubjectId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("TicketSubjectName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("TicketSubjectId");

                    b.HasIndex("TicketSubjectName")
                        .IsUnique();

                    b.ToTable("TicketSubject");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.Tovar", b =>
                {
                    b.Property<int>("TovarNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("tovar_number");

                    b.Property<bool>("AllKol")
                        .HasColumnName("all_kol");

                    b.Property<string>("AnalyticCode")
                        .HasMaxLength(32);

                    b.Property<string>("Articul")
                        .HasColumnName("articul")
                        .HasMaxLength(255);

                    b.Property<double?>("Balls")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("balls")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("CenaRozn2")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cena_rozn2")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("CenaRozn2Dol")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cena_rozn2_dol")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("CenaRozn3")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cena_rozn3")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("CenaRozn3Dol")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cena_rozn3_dol")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("CenaRozn4")
                        .HasColumnName("cena_rozn4");

                    b.Property<double?>("CenaRozn4Dol")
                        .HasColumnName("cena_rozn4_dol");

                    b.Property<double?>("CenaRozn5")
                        .HasColumnName("cena_rozn5");

                    b.Property<double?>("CenaRozn5Dol")
                        .HasColumnName("cena_rozn5_dol");

                    b.Property<double?>("CenaRoznSprav")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cena_rozn_sprav")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("CenaRoznSpravDol")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cena_rozn_sprav_dol")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("CertEndDate")
                        .HasColumnName("cert_end_date")
                        .HasColumnType("datetime");

                    b.Property<string>("Certificate")
                        .HasColumnName("certificate")
                        .HasMaxLength(20);

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasMaxLength(255);

                    b.Property<bool?>("DiscountCalcOn1")
                        .HasColumnName("discount_calc_on1");

                    b.Property<bool?>("DiscountCalcOn2")
                        .HasColumnName("discount_calc_on2");

                    b.Property<bool?>("DiscountCalcOn3")
                        .HasColumnName("discount_calc_on3");

                    b.Property<bool?>("DiscountCalcOn4")
                        .HasColumnName("discount_calc_on4");

                    b.Property<bool?>("DiscountCalcOn5")
                        .HasColumnName("discount_calc_on5");

                    b.Property<double?>("DiscountLimitation")
                        .HasColumnName("discount_limitation");

                    b.Property<bool?>("DiscountMarkup")
                        .HasColumnName("discount_markup");

                    b.Property<double?>("DiscountPercent1")
                        .HasColumnName("discount_percent1");

                    b.Property<double?>("DiscountPercent2")
                        .HasColumnName("discount_percent2");

                    b.Property<double?>("DiscountPercent3")
                        .HasColumnName("discount_percent3");

                    b.Property<double?>("DiscountPercent4")
                        .HasColumnName("discount_percent4");

                    b.Property<double?>("DiscountPercent5")
                        .HasColumnName("discount_percent5");

                    b.Property<int?>("FiscalGroupNumber")
                        .HasColumnName("fiscal_group_number");

                    b.Property<int?>("FranchTopId")
                        .HasColumnName("franch_top_id");

                    b.Property<byte[]>("Image1")
                        .HasColumnName("image1")
                        .HasColumnType("image");

                    b.Property<byte[]>("Image1Cash")
                        .HasColumnName("image1_cash")
                        .HasColumnType("image");

                    b.Property<int?>("IzmerNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("izmer_number")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("KatNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("kat_number")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("KolDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("kol_default")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("KolInPak")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("kol_in_pak")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("KolLinked1")
                        .HasColumnName("kol_linked1");

                    b.Property<double?>("KolLinked2")
                        .HasColumnName("kol_linked2");

                    b.Property<double?>("KolMin1")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("kol_min1")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("KolMin2")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("kol_min2")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("KolOsn1")
                        .HasColumnName("kol_osn1");

                    b.Property<double?>("KolOsn2")
                        .HasColumnName("kol_osn2");

                    b.Property<double?>("LastCenaOpt")
                        .HasColumnName("last_cena_opt");

                    b.Property<double?>("LastCenaOptDol")
                        .HasColumnName("last_cena_opt_dol");

                    b.Property<DateTime?>("LastEditDate")
                        .HasColumnName("last_edit_date")
                        .HasColumnType("datetime");

                    b.Property<double?>("Objem")
                        .HasColumnName("objem");

                    b.Property<double?>("PercSkid1")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("perc_skid1")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("PercSkid2")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("perc_skid2")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ProducedBy")
                        .HasColumnName("produced_by")
                        .HasMaxLength(255);

                    b.Property<bool>("Product")
                        .HasColumnName("product");

                    b.Property<int?>("PurchasePeriod")
                        .HasColumnName("purchase_period");

                    b.Property<int?>("RoundTo1")
                        .HasColumnName("round_to1");

                    b.Property<int?>("RoundTo2")
                        .HasColumnName("round_to2");

                    b.Property<int?>("RoundTo3")
                        .HasColumnName("round_to3");

                    b.Property<int?>("RoundTo4")
                        .HasColumnName("round_to4");

                    b.Property<int?>("RoundTo5")
                        .HasColumnName("round_to5");

                    b.Property<bool>("SerialNumberCheck")
                        .HasColumnName("serial_number_check");

                    b.Property<double?>("SpareFactor")
                        .HasColumnName("spare_factor");

                    b.Property<double?>("StDost")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("st_dost")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("StDostAlg")
                        .HasColumnName("st_dost_alg");

                    b.Property<double?>("StDostDol")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("st_dost_dol")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("Tara")
                        .HasColumnName("tara");

                    b.Property<int?>("Tara1Number")
                        .HasColumnName("tara1_number");

                    b.Property<bool?>("Tara1Round")
                        .HasColumnName("tara1_round");

                    b.Property<int?>("Tara2Number")
                        .HasColumnName("tara2_number");

                    b.Property<bool?>("Tara2Round")
                        .HasColumnName("tara2_round");

                    b.Property<bool>("Tare1Check")
                        .HasColumnName("tare1_check");

                    b.Property<bool>("Tare2Check")
                        .HasColumnName("tare2_check");

                    b.Property<bool>("TovClosed")
                        .HasColumnName("tov_closed");

                    b.Property<string>("TovDescription")
                        .HasColumnName("tov_description")
                        .HasMaxLength(4000);

                    b.Property<string>("TovPicture")
                        .HasColumnName("tov_picture")
                        .HasMaxLength(255);

                    b.Property<int?>("TovarBackcolor")
                        .HasColumnName("tovar_backcolor");

                    b.Property<bool>("TovarFontBold")
                        .HasColumnName("tovar_font_bold");

                    b.Property<bool>("TovarFontItalic")
                        .HasColumnName("tovar_font_italic");

                    b.Property<string>("TovarFontName")
                        .HasColumnName("tovar_font_name")
                        .HasMaxLength(127);

                    b.Property<int?>("TovarFontSize")
                        .HasColumnName("tovar_font_size");

                    b.Property<int?>("TovarForecolor")
                        .HasColumnName("tovar_forecolor");

                    b.Property<string>("TovarKod")
                        .HasColumnName("tovar_kod")
                        .HasMaxLength(50);

                    b.Property<string>("TovarName")
                        .IsRequired()
                        .HasColumnName("tovar_name")
                        .HasMaxLength(250);

                    b.Property<int?>("TovarType")
                        .HasColumnName("tovar_type");

                    b.Property<string>("UktzedCode")
                        .HasColumnName("UKTZED_code")
                        .HasMaxLength(255);

                    b.Property<string>("UniNumber")
                        .HasColumnName("uni_number")
                        .HasMaxLength(50);

                    b.Property<bool?>("UseCert")
                        .HasColumnName("use_cert");

                    b.Property<double?>("Ves")
                        .HasColumnName("ves");

                    b.Property<string>("VideoHyperlink")
                        .HasColumnName("video_hyperlink")
                        .HasMaxLength(4000);

                    b.Property<int?>("Warranty")
                        .HasColumnName("warranty");

                    b.HasKey("TovarNumber")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("Balls")
                        .HasName("balls");

                    b.HasIndex("IzmerNumber")
                        .HasName("izmer_number");

                    b.HasIndex("KatNumber")
                        .HasName("kat_number");

                    b.HasIndex("TovarName")
                        .HasName("tovar_name");

                    b.HasIndex("TovarName", "KatNumber")
                        .IsUnique()
                        .HasName("tovar_and_kat")
                        .HasFilter("[kat_number] IS NOT NULL");

                    b.ToTable("tovar");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.TovarCode", b =>
                {
                    b.Property<int>("TovarCodeNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("tovar_code_number");

                    b.Property<bool>("ChkDisable")
                        .HasColumnName("chk_disable");

                    b.Property<bool>("Closed")
                        .HasColumnName("closed");

                    b.Property<string>("TovarBarCode")
                        .HasColumnName("tovar_bar_code")
                        .HasMaxLength(255);

                    b.Property<int?>("TovarNumber")
                        .HasColumnName("tovar_number");

                    b.HasKey("TovarCodeNumber")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("TovarNumber")
                        .HasName("tovartovar_code");

                    b.ToTable("tovar_code");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.User", b =>
                {
                    b.Property<int>("UserNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_number");

                    b.Property<bool>("Admin")
                        .HasColumnName("admin");

                    b.Property<bool?>("AllowPurchaseKurs")
                        .HasColumnName("allow_purchase_kurs");

                    b.Property<bool?>("AllowSalesKurs")
                        .HasColumnName("allow_sales_kurs");

                    b.Property<bool>("ArticlSprav")
                        .HasColumnName("articl_sprav");

                    b.Property<bool>("CashReportAccess")
                        .HasColumnName("cash_report_access");

                    b.Property<bool>("ChangeDate")
                        .HasColumnName("change_date");

                    b.Property<bool>("CliSprav")
                        .HasColumnName("cli_sprav");

                    b.Property<bool>("CliZad")
                        .HasColumnName("cli_zad");

                    b.Property<bool?>("Closed")
                        .HasColumnName("closed");

                    b.Property<int?>("DaysBackward")
                        .HasColumnName("days_backward");

                    b.Property<int?>("DaysForward")
                        .HasColumnName("days_forward");

                    b.Property<double?>("MaxDiscount")
                        .HasColumnName("max_discount");

                    b.Property<bool>("NegativeRests")
                        .HasColumnName("negative_rests");

                    b.Property<bool?>("PointSprav")
                        .HasColumnName("point_sprav");

                    b.Property<bool>("RLApprove")
                        .HasColumnName("r_l_approve");

                    b.Property<bool>("RLDelete")
                        .HasColumnName("r_l_delete");

                    b.Property<bool>("RLEdit")
                        .HasColumnName("r_l_edit");

                    b.Property<bool>("RLRollback")
                        .HasColumnName("r_l_rollback");

                    b.Property<bool>("RLView")
                        .HasColumnName("r_l_view");

                    b.Property<bool?>("ReportAccess")
                        .HasColumnName("report_access");

                    b.Property<bool>("RouteSprav")
                        .HasColumnName("route_sprav");

                    b.Property<bool>("SaleMorePurchase")
                        .HasColumnName("sale_more_purchase");

                    b.Property<bool?>("SettlementsAccess")
                        .HasColumnName("settlements_access");

                    b.Property<bool>("Sprav")
                        .HasColumnName("sprav");

                    b.Property<bool>("TovarSprav")
                        .HasColumnName("tovar_sprav");

                    b.Property<string>("UserFullname")
                        .HasColumnName("user_fullname")
                        .HasMaxLength(255);

                    b.Property<string>("UserName")
                        .HasColumnName("user_name")
                        .HasMaxLength(255);

                    b.Property<string>("UserPasswd")
                        .HasColumnName("user_passwd")
                        .HasMaxLength(255);

                    b.HasKey("UserNumber")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("user");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.UserRights", b =>
                {
                    b.Property<int>("UserRightsNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_rights_number");

                    b.Property<int?>("PointNumber")
                        .HasColumnName("point_number");

                    b.Property<int?>("UserNumber")
                        .HasColumnName("user_number");

                    b.Property<bool>("_00approve")
                        .HasColumnName("00approve");

                    b.Property<bool>("_00delete")
                        .HasColumnName("00delete");

                    b.Property<bool>("_00edit")
                        .HasColumnName("00edit");

                    b.Property<bool>("_00rollback")
                        .HasColumnName("00rollback");

                    b.Property<bool>("_00view")
                        .HasColumnName("00view");

                    b.Property<bool>("_01approve")
                        .HasColumnName("01approve");

                    b.Property<bool>("_01delete")
                        .HasColumnName("01delete");

                    b.Property<bool>("_01edit")
                        .HasColumnName("01edit");

                    b.Property<bool>("_01rollback")
                        .HasColumnName("01rollback");

                    b.Property<bool>("_01view")
                        .HasColumnName("01view");

                    b.Property<bool>("_02approve")
                        .HasColumnName("02approve");

                    b.Property<bool>("_02delete")
                        .HasColumnName("02delete");

                    b.Property<bool>("_02edit")
                        .HasColumnName("02edit");

                    b.Property<bool>("_02rollback")
                        .HasColumnName("02rollback");

                    b.Property<bool>("_02view")
                        .HasColumnName("02view");

                    b.Property<bool?>("_03approve")
                        .HasColumnName("03approve");

                    b.Property<bool?>("_03delete")
                        .HasColumnName("03delete");

                    b.Property<bool?>("_03edit")
                        .HasColumnName("03edit");

                    b.Property<bool?>("_03rollback")
                        .HasColumnName("03rollback");

                    b.Property<bool?>("_03view")
                        .HasColumnName("03view");

                    b.Property<bool>("_04approve")
                        .HasColumnName("04approve");

                    b.Property<bool>("_04delete")
                        .HasColumnName("04delete");

                    b.Property<bool>("_04edit")
                        .HasColumnName("04edit");

                    b.Property<bool>("_04rollback")
                        .HasColumnName("04rollback");

                    b.Property<bool>("_04view")
                        .HasColumnName("04view");

                    b.Property<bool>("_05approve")
                        .HasColumnName("05approve");

                    b.Property<bool>("_05delete")
                        .HasColumnName("05delete");

                    b.Property<bool>("_05edit")
                        .HasColumnName("05edit");

                    b.Property<bool>("_05rollback")
                        .HasColumnName("05rollback");

                    b.Property<bool>("_05view")
                        .HasColumnName("05view");

                    b.Property<bool>("_07approve")
                        .HasColumnName("07approve");

                    b.Property<bool>("_07delete")
                        .HasColumnName("07delete");

                    b.Property<bool>("_07edit")
                        .HasColumnName("07edit");

                    b.Property<bool>("_07rollback")
                        .HasColumnName("07rollback");

                    b.Property<bool>("_07view")
                        .HasColumnName("07view");

                    b.Property<bool>("_08approve")
                        .HasColumnName("08approve");

                    b.Property<bool>("_08delete")
                        .HasColumnName("08delete");

                    b.Property<bool>("_08edit")
                        .HasColumnName("08edit");

                    b.Property<bool>("_08rollback")
                        .HasColumnName("08rollback");

                    b.Property<bool>("_08view")
                        .HasColumnName("08view");

                    b.Property<bool>("_09approve")
                        .HasColumnName("09approve");

                    b.Property<bool>("_09delete")
                        .HasColumnName("09delete");

                    b.Property<bool>("_09edit")
                        .HasColumnName("09edit");

                    b.Property<bool>("_09rollback")
                        .HasColumnName("09rollback");

                    b.Property<bool>("_09view")
                        .HasColumnName("09view");

                    b.Property<bool>("_14approve")
                        .HasColumnName("14approve");

                    b.Property<bool>("_14delete")
                        .HasColumnName("14delete");

                    b.Property<bool>("_14edit")
                        .HasColumnName("14edit");

                    b.Property<bool>("_14rollback")
                        .HasColumnName("14rollback");

                    b.Property<bool>("_14view")
                        .HasColumnName("14view");

                    b.Property<bool?>("_15approve")
                        .HasColumnName("15approve");

                    b.Property<bool?>("_15delete")
                        .HasColumnName("15delete");

                    b.Property<bool?>("_15edit")
                        .HasColumnName("15edit");

                    b.Property<bool?>("_15rollback")
                        .HasColumnName("15rollback");

                    b.Property<bool?>("_15view")
                        .HasColumnName("15view");

                    b.Property<bool>("_17approve")
                        .HasColumnName("17approve");

                    b.Property<bool>("_17delete")
                        .HasColumnName("17delete");

                    b.Property<bool>("_17edit")
                        .HasColumnName("17edit");

                    b.Property<bool>("_17rollback")
                        .HasColumnName("17rollback");

                    b.Property<bool>("_17view")
                        .HasColumnName("17view");

                    b.Property<bool>("_18approve")
                        .HasColumnName("18approve");

                    b.Property<bool>("_18delete")
                        .HasColumnName("18delete");

                    b.Property<bool>("_18edit")
                        .HasColumnName("18edit");

                    b.Property<bool>("_18rollback")
                        .HasColumnName("18rollback");

                    b.Property<bool>("_18view")
                        .HasColumnName("18view");

                    b.Property<bool?>("_19approve")
                        .HasColumnName("19approve");

                    b.Property<bool?>("_19delete")
                        .HasColumnName("19delete");

                    b.Property<bool?>("_19edit")
                        .HasColumnName("19edit");

                    b.Property<bool?>("_19rollback")
                        .HasColumnName("19rollback");

                    b.Property<bool?>("_19view")
                        .HasColumnName("19view");

                    b.Property<bool?>("_20approve")
                        .HasColumnName("20approve");

                    b.Property<bool?>("_20delete")
                        .HasColumnName("20delete");

                    b.Property<bool?>("_20edit")
                        .HasColumnName("20edit");

                    b.Property<bool?>("_20rollback")
                        .HasColumnName("20rollback");

                    b.Property<bool?>("_20view")
                        .HasColumnName("20view");

                    b.Property<bool?>("_21approve")
                        .HasColumnName("21approve");

                    b.Property<bool?>("_21delete")
                        .HasColumnName("21delete");

                    b.Property<bool?>("_21edit")
                        .HasColumnName("21edit");

                    b.Property<bool?>("_21rollback")
                        .HasColumnName("21rollback");

                    b.Property<bool?>("_21view")
                        .HasColumnName("21view");

                    b.Property<bool?>("_22approve")
                        .HasColumnName("22approve");

                    b.Property<bool?>("_22delete")
                        .HasColumnName("22delete");

                    b.Property<bool?>("_22edit")
                        .HasColumnName("22edit");

                    b.Property<bool?>("_22rollback")
                        .HasColumnName("22rollback");

                    b.Property<bool?>("_22view")
                        .HasColumnName("22view");

                    b.HasKey("UserRightsNumber")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("user_rights");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.AccTransChema", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Articl", "ArticlNumberNavigation")
                        .WithMany("AccTransChema")
                        .HasForeignKey("ArticlNumber")
                        .HasConstraintName("acc_trans_chema_FK00");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.AspNetUserClaims", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.AspNetUsers", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.AspNetUserLogins", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.AspNetUsers", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.AspNetUserRoles", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.AspNetRoles", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.AspNetUsers", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.BillOptionsInfo", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.DocumentTemplate", "DocumentTemplate")
                        .WithOne("BillOptionsInfo")
                        .HasForeignKey("Base2BaseWeb.B2B.DataLayer.Entities.BillOptionsInfo", "DocumentTemplateId");

                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Point", "Point")
                        .WithMany("BillOptionsInfo")
                        .HasForeignKey("PointNumber");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.BillSettingsInfo", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.DocumentTemplate", "DocumentTemplate")
                        .WithOne("BillSettingsInfo")
                        .HasForeignKey("Base2BaseWeb.B2B.DataLayer.Entities.BillSettingsInfo", "DocumentTemplateId");

                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Point", "Point")
                        .WithOne("BillSettingsInfo")
                        .HasForeignKey("Base2BaseWeb.B2B.DataLayer.Entities.BillSettingsInfo", "PointNumber");

                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.ServicePlaceholderType", "ServicePlaceholderType")
                        .WithOne("BillSettingsInfo")
                        .HasForeignKey("Base2BaseWeb.B2B.DataLayer.Entities.BillSettingsInfo", "ServicePlaceholderTypeId");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.ClientConnectionInfo", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Point", "Point")
                        .WithOne("ClientConnectionInfo")
                        .HasForeignKey("Base2BaseWeb.B2B.DataLayer.Entities.ClientConnectionInfo", "PointNumber");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.ContactEmailInfo", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Point", "Point")
                        .WithMany("ContactEmailInfo")
                        .HasForeignKey("PointNumber");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.ContactPhoneInfo", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Point", "Point")
                        .WithMany("ContactPhoneInfo")
                        .HasForeignKey("PointNumber");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.DebtCalcMethodInfo", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.DebtCalcMethodType", "DebtCalcMethodTypes")
                        .WithMany("DebtCalcMethodInfo")
                        .HasForeignKey("DebtCalcMethodTypeId");

                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Point", "Point")
                        .WithOne("DebtCalcMethodInfo")
                        .HasForeignKey("Base2BaseWeb.B2B.DataLayer.Entities.DebtCalcMethodInfo", "PointNumber");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.DebtControlInfo", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Point", "Point")
                        .WithOne("DebtControlInfo")
                        .HasForeignKey("Base2BaseWeb.B2B.DataLayer.Entities.DebtControlInfo", "PointNumber");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.DelivePoint", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Point", "PointNumberNavigation")
                        .WithMany("DelivePoint")
                        .HasForeignKey("PointNumber")
                        .HasConstraintName("delive_point_FK00");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.DiscountRules", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Point", "PointNumberNavigation")
                        .WithMany("DiscountRules")
                        .HasForeignKey("PointNumber")
                        .HasConstraintName("FK__discount___point__6319B466");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.DocumentTemplate", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.DocumentTemplateCategory", "DocumentTemplateCategory")
                        .WithMany("DocumentTemplates")
                        .HasForeignKey("DocumentTemplateCategoryId");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.ExtPoint", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Point", "PointNumberNavigation")
                        .WithMany("ExtPoint")
                        .HasForeignKey("PointNumber")
                        .HasConstraintName("FK__ext_point__point__59904A2C");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.ExtShablon", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Point", "PointNumberNavigation")
                        .WithMany("ExtShablon")
                        .HasForeignKey("PointNumber")
                        .HasConstraintName("FK__ext_shabl__point__54CB950F");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.ExtTovar", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Point", "PointNumberNavigation")
                        .WithMany("ExtTovar")
                        .HasForeignKey("PointNumber")
                        .HasConstraintName("FK__ext_tovar__point__51EF2864");

                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Tovar", "TovarNumberNavigation")
                        .WithMany("ExtTovar")
                        .HasForeignKey("TovarNumber")
                        .HasConstraintName("FK__ext_tovar__tovar__52E34C9D");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.FranchisingInfo", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.FranchisingType", "FranchisingType")
                        .WithMany("FranchisingInfo")
                        .HasForeignKey("FranchisingTypeId");

                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Point", "Point")
                        .WithOne("FranchisingInfo")
                        .HasForeignKey("Base2BaseWeb.B2B.DataLayer.Entities.FranchisingInfo", "PointNumber");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.Jrn", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.List", "ListNumberNavigation")
                        .WithMany("Jrn")
                        .HasForeignKey("ListNumber")
                        .HasConstraintName("FK_jrn_list");

                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Reestr", "ReestrNumberNavigation")
                        .WithMany("Jrn")
                        .HasForeignKey("ReestrNumber")
                        .HasConstraintName("FK_jrn_reestr");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.JrnOpl", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Nakl", "Nakl1NumberNavigation")
                        .WithMany("JrnOplNakl1NumberNavigation")
                        .HasForeignKey("Nakl1Number")
                        .HasConstraintName("FK__jrn_opl__nakl1_n__43A1090D");

                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Nakl", "Nakl2NumberNavigation")
                        .WithMany("JrnOplNakl2NumberNavigation")
                        .HasForeignKey("Nakl2Number")
                        .HasConstraintName("FK__jrn_opl__nakl2_n__44952D46");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.JrnRezerv", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.List", "ListNumberNavigation")
                        .WithMany("JrnRezervListNumberNavigation")
                        .HasForeignKey("ListNumber")
                        .HasConstraintName("FK__jrn_rezer__list___5A846E65");

                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.List", "ListRezervNumberNavigation")
                        .WithMany("JrnRezervListRezervNumberNavigation")
                        .HasForeignKey("ListRezervNumber")
                        .HasConstraintName("FK__jrn_rezer__list___5B78929E");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.KassaTovar", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Kassa", "Kassa")
                        .WithMany("KassaTovar")
                        .HasForeignKey("KassaId")
                        .HasConstraintName("FK_kassa_tovar_kassa");

                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Tovar", "Tovar")
                        .WithMany("KassaTovar")
                        .HasForeignKey("TovarId")
                        .HasConstraintName("FK_kassa_tovar_tovar");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.KatAgent", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Kat", "KatNumberNavigation")
                        .WithMany("KatAgent")
                        .HasForeignKey("KatNumber")
                        .HasConstraintName("FK__kat_agent__kat_n__5E54FF49");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.List", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Nakl", "NaklNumberNavigation")
                        .WithMany("List")
                        .HasForeignKey("NaklNumber")
                        .HasConstraintName("FK_list_nakl");

                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Tovar", "TovarNumberNavigation")
                        .WithMany("List")
                        .HasForeignKey("TovarNumber")
                        .HasConstraintName("FK_list_tovar");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.Manager", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Point", "Point")
                        .WithMany("Manager")
                        .HasForeignKey("PointId")
                        .HasConstraintName("FK_manager_point");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.MarketingActionRecords", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Nakl", "NaklNumberNavigation")
                        .WithMany("MarketingActionRecords")
                        .HasForeignKey("NaklNumber")
                        .HasConstraintName("FK__Marketing__nakl___725BF7F6");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.Nakl", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.DocStan", "DocStan")
                        .WithMany("Nakl")
                        .HasForeignKey("DocStanId")
                        .HasConstraintName("FK_nakl_DocStan");

                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Point", "Point1NumberNavigation")
                        .WithMany("NaklPoint1NumberNavigation")
                        .HasForeignKey("Point1Number")
                        .HasConstraintName("FK_nakl_point");

                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Point", "Point2NumberNavigation")
                        .WithMany("NaklPoint2NumberNavigation")
                        .HasForeignKey("Point2Number")
                        .HasConstraintName("FK_nakl_point1");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.NaklProp", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Nakl", "NaklNumberNavigation")
                        .WithMany("NaklProp")
                        .HasForeignKey("NaklNumber")
                        .HasConstraintName("nakl_prop_FK00");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.OrderExt", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Nakl", "OrderExtNumberNavigation")
                        .WithOne("OrderExt")
                        .HasForeignKey("Base2BaseWeb.B2B.DataLayer.Entities.OrderExt", "OrderExtNumber")
                        .HasConstraintName("FK__order_ext__order__67DE6983");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.OrdersRedirection", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Point", "PointNumberNavigation")
                        .WithMany("OrdersRedirectionPointNumberNavigation")
                        .HasForeignKey("PointNumber")
                        .HasConstraintName("FK__OrdersRed__point__6BAEFA67");

                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Point", "RestaurantNumberNavigation")
                        .WithMany("OrdersRedirectionRestaurantNumberNavigation")
                        .HasForeignKey("RestaurantNumber")
                        .HasConstraintName("FK__OrdersRed__resta__6ABAD62E");

                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Tovar", "TovarNumberNavigation")
                        .WithMany("OrdersRedirection")
                        .HasForeignKey("TovarNumber")
                        .HasConstraintName("FK__OrdersRed__tovar__6CA31EA0");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.Point", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.CliGroup", "CliGroup")
                        .WithMany("Point")
                        .HasForeignKey("CliGroupNumber");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.PointAgent", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Point", "AgentNumberNavigation")
                        .WithMany("PointAgent")
                        .HasForeignKey("AgentNumber")
                        .HasConstraintName("FK__point_age__agent__55BFB948");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.PriceShields", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Nakl", "NaklNumberNavigation")
                        .WithMany("PriceShields")
                        .HasForeignKey("NaklNumber")
                        .HasConstraintName("FK__PriceShie__nakl___567ED357");

                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Tovar", "TovarNumberNavigation")
                        .WithMany("PriceShields")
                        .HasForeignKey("TovarNumber")
                        .HasConstraintName("FK__PriceShie__tovar__558AAF1E");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.PrintJobInfo", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.DocumentTemplate", "DocumentTemplate")
                        .WithOne("PrintJobInfo")
                        .HasForeignKey("Base2BaseWeb.B2B.DataLayer.Entities.PrintJobInfo", "DocumentTemplateId");

                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Point", "Point")
                        .WithMany("PrintJobInfo")
                        .HasForeignKey("PointNumber");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.Recipe", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Tovar", "TovarNumberNavigation")
                        .WithMany("Recipe")
                        .HasForeignKey("TovarNumber")
                        .HasConstraintName("recipe_FK00");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.Reestr", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Point", "PointNumberNavigation")
                        .WithMany("Reestr")
                        .HasForeignKey("PointNumber")
                        .HasConstraintName("reestr_FK00");

                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Tovar", "TovarNumberNavigation")
                        .WithMany("Reestr")
                        .HasForeignKey("TovarNumber")
                        .HasConstraintName("reestr_FK01");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.RouteAgent", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Route", "RouteNumberNavigation")
                        .WithMany("RouteAgent")
                        .HasForeignKey("RouteNumber")
                        .HasConstraintName("FK__route_age__route__4C364F0E");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.RouteList", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Car", "CarNumberNavigation")
                        .WithMany("RouteList")
                        .HasForeignKey("CarNumber")
                        .HasConstraintName("route_list_FK00");

                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Point", "ExpeditorNumberNavigation")
                        .WithMany("RouteList")
                        .HasForeignKey("ExpeditorNumber")
                        .HasConstraintName("route_list_FK01");

                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Route", "RouteNumberNavigation")
                        .WithMany("RouteList")
                        .HasForeignKey("RouteNumber")
                        .HasConstraintName("route_list_FK02");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.RouteNaklList", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Nakl", "NaklNumberNavigation")
                        .WithMany("RouteNaklList")
                        .HasForeignKey("NaklNumber")
                        .HasConstraintName("route_nakl_list_FK01");

                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.RouteList", "RouteListNumberNavigation")
                        .WithMany("RouteNaklList")
                        .HasForeignKey("RouteListNumber")
                        .HasConstraintName("route_nakl_list_FK00");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.RoutePoint", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.DelivePoint", "DelivePointNumberNavigation")
                        .WithMany("RoutePoint")
                        .HasForeignKey("DelivePointNumber")
                        .HasConstraintName("route_point_FK00");

                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Route", "RouteNumberNavigation")
                        .WithMany("RoutePoint")
                        .HasForeignKey("RouteNumber")
                        .HasConstraintName("route_point_FK01");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.Service", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Kassa", "Kassa")
                        .WithMany("Service")
                        .HasForeignKey("KassaId")
                        .HasConstraintName("FK_service_kassa");

                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Point", "Point")
                        .WithMany("Service")
                        .HasForeignKey("PointId")
                        .HasConstraintName("FK_service_point");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.Shop", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Manager", "Manager")
                        .WithMany("Shop")
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("FK_shop_manager");

                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Point", "Point")
                        .WithMany("Shop")
                        .HasForeignKey("PointId")
                        .HasConstraintName("FK_shop_point");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.Ticket", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Point", "Point")
                        .WithMany("Tickets")
                        .HasForeignKey("PointNumber");

                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.TicketStatus", "TicketStatus")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketStatusId");

                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.TicketSubject", "TicketSubject")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketSubjectId");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.Tovar", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Izmer", "IzmerNumberNavigation")
                        .WithMany("Tovar")
                        .HasForeignKey("IzmerNumber")
                        .HasConstraintName("tovar_FK01");

                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Kat", "KatNumberNavigation")
                        .WithMany("Tovar")
                        .HasForeignKey("KatNumber")
                        .HasConstraintName("tovar_FK00");
                });

            modelBuilder.Entity("Base2BaseWeb.B2B.DataLayer.Entities.TovarCode", b =>
                {
                    b.HasOne("Base2BaseWeb.B2B.DataLayer.Entities.Tovar", "TovarNumberNavigation")
                        .WithMany("TovarCode")
                        .HasForeignKey("TovarNumber")
                        .HasConstraintName("tovar_code_FK00")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
